// Generated by gencpp from file affordance_experiment/PerformExperimentRequest.msg
// DO NOT EDIT!


#ifndef AFFORDANCE_EXPERIMENT_MESSAGE_PERFORMEXPERIMENTREQUEST_H
#define AFFORDANCE_EXPERIMENT_MESSAGE_PERFORMEXPERIMENTREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace affordance_experiment
{
template <class ContainerAllocator>
struct PerformExperimentRequest_
{
  typedef PerformExperimentRequest_<ContainerAllocator> Type;

  PerformExperimentRequest_()
    : tool_name()
    , object_list()
    , repeat_no(0)  {
    }
  PerformExperimentRequest_(const ContainerAllocator& _alloc)
    : tool_name(_alloc)
    , object_list(_alloc)
    , repeat_no(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _tool_name_type;
  _tool_name_type tool_name;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _object_list_type;
  _object_list_type object_list;

   typedef int8_t _repeat_no_type;
  _repeat_no_type repeat_no;





  typedef boost::shared_ptr< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> const> ConstPtr;

}; // struct PerformExperimentRequest_

typedef ::affordance_experiment::PerformExperimentRequest_<std::allocator<void> > PerformExperimentRequest;

typedef boost::shared_ptr< ::affordance_experiment::PerformExperimentRequest > PerformExperimentRequestPtr;
typedef boost::shared_ptr< ::affordance_experiment::PerformExperimentRequest const> PerformExperimentRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace affordance_experiment

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6fb0b1da9025d63f3831c18086cd1b40";
  }

  static const char* value(const ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6fb0b1da9025d63fULL;
  static const uint64_t static_value2 = 0x3831c18086cd1b40ULL;
};

template<class ContainerAllocator>
struct DataType< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "affordance_experiment/PerformExperimentRequest";
  }

  static const char* value(const ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string tool_name\n\
string[] object_list\n\
int8 repeat_no\n\
";
  }

  static const char* value(const ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.tool_name);
      stream.next(m.object_list);
      stream.next(m.repeat_no);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PerformExperimentRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::affordance_experiment::PerformExperimentRequest_<ContainerAllocator>& v)
  {
    s << indent << "tool_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.tool_name);
    s << indent << "object_list[]" << std::endl;
    for (size_t i = 0; i < v.object_list.size(); ++i)
    {
      s << indent << "  object_list[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.object_list[i]);
    }
    s << indent << "repeat_no: ";
    Printer<int8_t>::stream(s, indent + "  ", v.repeat_no);
  }
};

} // namespace message_operations
} // namespace ros

#endif // AFFORDANCE_EXPERIMENT_MESSAGE_PERFORMEXPERIMENTREQUEST_H
